"""
Sistema de An√°lise de E-commerce - AULA PR√ÅTICA DE PYTHON
=========================================================
Este √© um projeto educacional completo que demonstra:

üéØ CONCEITOS FUNDAMENTAIS:
- Estruturas de dados organizadas (listas, tuplas, dicion√°rios)  
- CRUD b√°sico em mem√≥ria (Create, Read, Update, Delete)
- Relat√≥rios (m√©dias, rankings, filtros)
- Exporta√ß√£o para CSV
- Tratamento robusto de exce√ß√µes
- Programa√ß√£o Orientada a Objetos
- Manipula√ß√£o de arquivos
- Interface de usu√°rio interativa

üèóÔ∏è ARQUITETURA:
- Classes especializadas para cada responsabilidade
- Separa√ß√£o clara entre dados, l√≥gica e apresenta√ß√£o
- Reutiliza√ß√£o de c√≥digo atrav√©s de m√©todos
- Tratamento de erros em todas as opera√ß√µes

üìö IDEAL PARA APRENDER:
- L√≥gica de programa√ß√£o avan√ßada
- Estruturas de dados na pr√°tica
- Boas pr√°ticas de desenvolvimento
- Documenta√ß√£o e organiza√ß√£o de c√≥digo
"""

# ============================================================================
# IMPORTA√á√ïES - Bibliotecas necess√°rias para o funcionamento do sistema
# ============================================================================

# Biblioteca para download de datasets do Kaggle
import kagglehub

# Biblioteca padr√£o do Python para opera√ß√µes com arquivos e diret√≥rios
import os

# Biblioteca para leitura e escrita de arquivos CSV (Comma Separated Values)
import csv

# Biblioteca para trabalhar com dados em formato JSON (n√£o usada no projeto atual)
import json

# Classe para trabalhar com datas e hor√°rios
from datetime import datetime

# Estruturas de dados especiais do Python:
# - defaultdict: dicion√°rio que cria valores padr√£o automaticamente
# - Counter: contador autom√°tico para elementos
from collections import defaultdict, Counter

# Tipagens para melhor documenta√ß√£o e valida√ß√£o do c√≥digo:
# - Dict: dicion√°rio tipado
# - List: lista tipada
# - Tuple: tupla tipada
# - Optional: valor que pode ser None
# - Any: qualquer tipo de dado
from typing import Dict, List, Tuple, Optional, Any

# Biblioteca para controle do sistema (usado para sair do programa)
import sys


# ============================================================================
# CLASSE DATASTRUCTURE - Organiza√ß√£o das Estruturas de Dados
# ============================================================================

class DataStructure:
    """
      Estruturas de Dados Organizadas
    
    Esta classe demonstra como organizar dados usando as estruturas corretas:
    - LISTAS: Para dados ordenados e pesquis√°veis
    - DICION√ÅRIOS: Para acesso r√°pido por chave
    - TUPLAS: Para dados imut√°veis (que n√£o mudam)
    - CONTADORES: Para estat√≠sticas autom√°ticas
    
    üí° CONCEITO: Cada estrutura tem seu prop√≥sito espec√≠fico!
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR DA CLASSE
        
        Aqui inicializamos todas as estruturas de dados que vamos usar.
        O __init__ √© chamado automaticamente quando criamos um objeto.
        """
        
        # ====================================================================
        # ESTRUTURAS PRINCIPAIS DE DADOS
        # ====================================================================
        
        # üìù LISTA DE VENDAS:
        # - Por que lista? Porque precisamos manter a ordem das vendas
        # - Por que List[Dict[str, Any]]? Cada venda √© um dicion√°rio com dados
        # - Exemplo: [{'invoice_no': '001', 'total': 100.0}, {...}]
        self.vendas: List[Dict[str, Any]] = []
        
        # üì¶ DICION√ÅRIO DE PRODUTOS:
        # - Por que dicion√°rio? Para buscar produtos rapidamente pelo c√≥digo
        # - Estrutura: {'PROD001': {'description': 'Produto 1', 'vendas': 10}}
        # - Acesso r√°pido: O(1) vs O(n) em lista
        self.produtos: Dict[str, Dict[str, Any]] = {}
        
        # üë• DICION√ÅRIO DE CLIENTES:
        # - Similar aos produtos, mas indexado por ID do cliente
        # - Permite encontrar cliente instantaneamente
        self.clientes: Dict[str, Dict[str, Any]] = {}
        
        # üåç PA√çSES COM DEFAULTDICT:
        # - defaultdict(list) cria uma lista vazia automaticamente
        # - Evita erros de "key not found"
        # - Exemplo: se acessarmos paises['Brasil'], cria [] automaticamente
        self.paises: Dict[str, List[str]] = defaultdict(list)
        
        # ====================================================================
        # TUPLAS PARA METADADOS (DADOS IMUT√ÅVEIS)
        # ====================================================================
        
        # üìã COLUNAS DO DATASET:
        # - Por que tupla? Porque as colunas NUNCA mudam!
        # - Tuplas s√£o imut√°veis, garantem que ningu√©m altere por engano
        # - Mais eficiente em mem√≥ria que listas
        self.colunas_dataset: Tuple[str, ...] = (
            'InvoiceNo',    # N√∫mero da fatura
            'StockCode',    # C√≥digo do produto
            'Description',  # Descri√ß√£o do produto
            'Quantity',     # Quantidade vendida
            'InvoiceDate',  # Data da venda
            'UnitPrice',    # Pre√ßo unit√°rio
            'CustomerID',   # ID do cliente
            'Country'       # Pa√≠s da venda
        )
        
        # ====================================================================
        # CONTADORES PARA ESTAT√çSTICAS AUTOM√ÅTICAS
        # ====================================================================
        
        # üìä CONTADOR DE VENDAS POR PA√çS:
        # - Counter √© um dicion√°rio especial que conta automaticamente
        # - Exemplo: counter['Brasil'] += 1 conta mais uma venda no Brasil
        # - M√©todo most_common() retorna os mais frequentes
        self.contador_vendas_pais = Counter()
        
        # üìà CONTADOR DE PRODUTOS:
        # - Conta quantas vezes cada produto foi vendido
        # - √ötil para rankings e estat√≠sticas
        self.contador_produtos = Counter()
        
    def adicionar_venda(self, registro: Dict[str, Any]) -> bool:
        """
          M√©todo para Adicionar Vendas
        
        Este m√©todo demonstra:
        - Valida√ß√£o de dados de entrada
        - Convers√£o segura de tipos
        - Tratamento de exce√ß√µes
        - Atualiza√ß√£o de m√∫ltiplas estruturas
        
        Args:
            registro: Dicion√°rio com dados da venda do CSV
            
        Returns:
            bool: True se sucesso, False se erro
        """
        try:
            # ================================================================
            # ETAPA 1: VALIDA√á√ÉO DOS DADOS OBRIGAT√ìRIOS
            # ================================================================
            
            # üîç Por que validar?
            # - Evita dados corrompidos no sistema
            # - Falha r√°pida se dados essenciais est√£o ausentes
            # - .get() retorna None se chave n√£o existir (seguro)
            
            if not registro.get('InvoiceNo') or not registro.get('StockCode'):
                # raise ValueError interrompe a execu√ß√£o e lan√ßa uma exce√ß√£o
                # Ser√° capturada pelo except abaixo
                raise ValueError("InvoiceNo e StockCode s√£o obrigat√≥rios")
            
            # ================================================================
            # ETAPA 2: CONVERS√ÉO SEGURA DE TIPOS
            # ================================================================
            
            # üîÑ Por que converter tipos?
            # - Dados do CSV v√™m como string
            # - Precisamos de n√∫meros para c√°lculos
            # - .get(chave, valor_padr√£o) evita erros se chave n√£o existir
            
            venda = {
                # Strings: mantemos como texto
                'invoice_no': str(registro['InvoiceNo']),
                'stock_code': str(registro['StockCode']),
                'description': str(registro.get('Description', '')),  # '' se vazio
                
                # N√∫meros inteiros: int(float()) para lidar com "1.0"
                'quantity': int(float(registro.get('Quantity', 0))),
                
                # Datas: mantemos como string por simplicidade
                'invoice_date': str(registro.get('InvoiceDate', '')),
                
                # N√∫meros decimais: float() para pre√ßos
                'unit_price': float(registro.get('UnitPrice', 0)),
                
                # IDs: podem estar vazios, mantemos como string
                'customer_id': str(registro.get('CustomerID', '')),
                'country': str(registro.get('Country', '')),
                
                # C√°lculo do total: quantidade √ó pre√ßo unit√°rio
                'total': int(float(registro.get('Quantity', 0))) * float(registro.get('UnitPrice', 0))
            }
            
            # ================================================================
            # ETAPA 3: ADICIONAR √Ä ESTRUTURA PRINCIPAL
            # ================================================================
            
            # üìù Adicionar √† lista de vendas
            # - append() adiciona ao final da lista
            # - Mant√©m ordem cronol√≥gica das vendas
            self.vendas.append(venda)
            
            # ================================================================
            # ETAPA 4: ATUALIZAR ESTRUTURAS AUXILIARES
            # ================================================================
            
            # üîÑ Por que atualizar outras estruturas?
            # - Mant√©m consist√™ncia dos dados
            # - Permite buscas r√°pidas por produto, cliente, pa√≠s
            # - Atualiza estat√≠sticas automaticamente
            
            self._atualizar_produto(venda)   # Atualiza dicion√°rio de produtos
            self._atualizar_cliente(venda)   # Atualiza dicion√°rio de clientes  
            self._atualizar_pais(venda)      # Atualiza dicion√°rio de pa√≠ses
            
            return True  # ‚úÖ Sucesso!
            
        except (ValueError, TypeError) as e:
            # ================================================================
            # TRATAMENTO DE EXCE√á√ïES
            # ================================================================
            
            # üöë Por que capturar exce√ß√µes?
            # - ValueError: dados inv√°lidos (ex: string em campo num√©rico)
            # - TypeError: tipos incompat√≠veis
            # - Evita que o programa pare completamente
            
            print(f"Erro ao adicionar venda: {e}")
            return False  # ‚ùå Falhou!
    
    def _atualizar_produto(self, venda: Dict[str, Any]):
        """
          M√©todo Privado para Atualizar Produtos
        
        O underscore (_) indica que √© um m√©todo privado:
        - S√≥ deve ser chamado internamente pela classe
        - N√£o faz parte da interface p√∫blica
        - Conven√ß√£o Python para organiza√ß√£o
        """
        
        # ================================================================
        # ETAPA 1: IDENTIFICAR O PRODUTO
        # ================================================================
        
        # Extrair o c√≥digo do produto da venda atual
        stock_code = venda['stock_code']
        
        # ================================================================
        # ETAPA 2: VERIFICAR SE PRODUTO J√Å EXISTE
        # ================================================================
        
        # üîç Por que verificar?
        # - Primeira venda de um produto: criar entrada nova
        # - Vendas subsequentes: apenas atualizar totais
        
        if stock_code not in self.produtos:
            # üÜï PRODUTO NOVO: criar entrada inicial
            self.produtos[stock_code] = {
                'description': venda['description'],  # Nome do produto
                'vendas_total': 0,                   # Contador de vendas
                'quantidade_total': 0,               # Soma das quantidades
                'receita_total': 0.0                 # Soma dos valores
            }
        
        # ================================================================
        # ETAPA 3: ATUALIZAR ESTAT√çSTICAS DO PRODUTO
        # ================================================================
        
        # Refer√™ncia ao produto no dicion√°rio (para facilitar acesso)
        produto = self.produtos[stock_code]
        
        # üìä Incrementar contadores:
        produto['vendas_total'] += 1                    # +1 venda
        produto['quantidade_total'] += venda['quantity'] # +quantidade vendida
        produto['receita_total'] += venda['total']      # +valor da venda
        
        # ================================================================
        # ETAPA 4: ATUALIZAR CONTADOR ESPECIAL
        # ================================================================
        
        # üèÜ Counter para rankings autom√°ticos
        # - Usado para encontrar produtos mais vendidos rapidamente
        # - Counter.most_common() j√° ordena por quantidade
        self.contador_produtos[stock_code] += venda['quantity']
    
    def _atualizar_cliente(self, venda: Dict[str, Any]):
        """
          Atualizando Dados de Clientes
        
        Demonstra:
        - Valida√ß√£o de dados antes de processar
        - Cria√ß√£o condicional de registros
        - Acumula√ß√£o de estat√≠sticas por cliente
        """
        
        # ================================================================
        # ETAPA 1: EXTRAIR E VALIDAR ID DO CLIENTE
        # ================================================================
        
        customer_id = venda['customer_id']
        
        # üîç Por que validar customer_id?
        # - Nem todas as vendas t√™m cliente identificado
        # - Vendas an√¥nimas ou √† vista podem ter ID vazio
        # - Evita criar entradas desnecess√°rias no dicion√°rio
        
        if customer_id and customer_id != '':
            # ============================================================
            # ETAPA 2: VERIFICAR SE CLIENTE J√Å EXISTE
            # ============================================================
            
            if customer_id not in self.clientes:
                # üÜï CLIENTE NOVO: criar perfil inicial
                self.clientes[customer_id] = {
                    'pais': venda['country'],          # Pa√≠s do cliente
                    'compras_total': 0,                # N√∫mero de compras
                    'quantidade_total': 0,             # Total de itens comprados
                    'gasto_total': 0.0                 # Total gasto pelo cliente
                }
            
            # ============================================================
            # ETAPA 3: ATUALIZAR PERFIL DO CLIENTE
            # ============================================================
            
            # Refer√™ncia ao cliente (mais f√°cil que repetir self.clientes[customer_id])
            cliente = self.clientes[customer_id]
            
            # üìä Acumular estat√≠sticas:
            cliente['compras_total'] += 1                    # +1 compra
            cliente['quantidade_total'] += venda['quantity'] # +itens comprados
            cliente['gasto_total'] += venda['total']         # +valor gasto
    
    def _atualizar_pais(self, venda: Dict[str, Any]):
        """
          Atualizando Dados por Pa√≠s
        
        Demonstra:
        - Uso do defaultdict para evitar erros
        - M√∫ltiplas estruturas para diferentes prop√≥sitos
        - Efici√™ncia de contadores autom√°ticos
        """
        
        # ================================================================
        # ETAPA 1: EXTRAIR E VALIDAR PA√çS
        # ================================================================
        
        pais = venda['country']
        
        # üåç Por que validar pa√≠s?
        # - Alguns registros podem ter pa√≠s vazio
        # - Evita processamento desnecess√°rio
        
        if pais:
            # ============================================================
            # ETAPA 2: ADICIONAR VENDA √Ä LISTA DO PA√çS
            # ============================================================
            
            # üìù Por que usar defaultdict(list)?
            # - Se pa√≠s n√£o existe, cria lista vazia automaticamente
            # - Sem defaultdict, precisar√≠amos: if pais not in self.paises: self.paises[pais] = []
            # - append() adiciona o n√∫mero da fatura √† lista do pa√≠s
            self.paises[pais].append(venda['invoice_no'])
            
            # ============================================================
            # ETAPA 3: INCREMENTAR CONTADOR DO PA√çS
            # ============================================================
            
            # üìà Por que usar Counter?
            # - Conta automaticamente vendas por pa√≠s
            # - Counter[pais] += 1 incrementa o contador
            # - M√©todo .most_common() j√° ordena por quantidade
            self.contador_vendas_pais[pais] += 1


# ============================================================================
# CLASSE ECOMMERCECRUDE - Opera√ß√µes CRUD (Create, Read, Update, Delete)
# ============================================================================

class EcommerceCRUD:
    """
      Opera√ß√µes CRUD em Mem√≥ria
    
    CRUD s√£o as 4 opera√ß√µes b√°sicas de qualquer sistema de dados:
    
    üÜï CREATE (Criar):
    - Adicionar novos registros ao sistema
    - Validar dados antes de inserir
    
    üîç READ (Ler):
    - Buscar registros existentes
    - Filtrar por diferentes crit√©rios
    - Listar todos os dados
    
    ‚úèÔ∏è UPDATE (Atualizar):
    - Modificar registros existentes
    - Manter consist√™ncia dos dados
    
    üóëÔ∏è DELETE (Deletar):
    - Remover registros do sistema
    - Confirma√ß√µes de seguran√ßa
    
    üí° CONCEITO: Separa√ß√£o de Responsabilidades
    - Esta classe S√ì cuida das opera√ß√µes CRUD
    - N√£o se preocupa com interface ou relat√≥rios
    - Reutiliz√°vel em diferentes contextos
    """
    
    def __init__(self, data_structure: DataStructure):
        """
        üèóÔ∏è CONSTRUTOR
        
        Recebe uma inst√¢ncia de DataStructure para trabalhar.
        Isso √© chamado de "Composi√ß√£o" - uma classe usa outra.
        
        Args:
            data_structure: Objeto que cont√©m todas as estruturas de dados
        """
        # Guardar refer√™ncia para as estruturas de dados
        # Assim podemos acessar vendas, produtos, clientes, etc.
        self.data = data_structure
    
    # ========================================================================
    # üÜï CREATE - CRIAR NOVOS REGISTROS
    # ========================================================================
    
    def criar_venda(self, dados_venda: Dict[str, Any]) -> bool:
        """
          Opera√ß√£o CREATE do CRUD
        
        Demonstra:
        - Delega√ß√£o de responsabilidades
        - Tratamento de exce√ß√µes em alto n√≠vel
        - Retorno consistente (bool)
        
        Args:
            dados_venda: Dicion√°rio com dados da nova venda
            
        Returns:
            bool: True se criou com sucesso, False se falhou
        """
        try:
            # üîÑ DELEGA√á√ÉO:
            # - Esta classe n√£o implementa a l√≥gica de adi√ß√£o
            # - Delega para o m√©todo especializado em DataStructure
            # - Mant√©m responsabilidades separadas
            return self.data.adicionar_venda(dados_venda)
            
        except Exception as e:
            # üöë TRATAMENTO DE EXCE√á√ÉO EM ALTO N√çVEL:
            # - Captura qualquer erro n√£o tratado pelos m√©todos internos
            # - Fornece feedback ao usu√°rio
            # - Evita que o programa pare
            print(f"Erro ao criar venda: {e}")
            return False
    
    # ========================================================================
    # üîç READ - LER/BUSCAR REGISTROS EXISTENTES
    # ========================================================================
    
    def buscar_venda_por_invoice(self, invoice_no: str) -> Optional[Dict[str, Any]]:
        """
          Opera√ß√£o READ - Busca Por Chave Prim√°ria
        
        Demonstra:
        - Busca linear em lista (algoritmo O(n))
        - Uso de Optional para indicar "pode n√£o encontrar"
        - Retorno None quando n√£o encontra
        
        Args:
            invoice_no: N√∫mero da fatura para buscar
            
        Returns:
            Optional[Dict]: Venda encontrada ou None
        """
        try:
            # üîÑ BUSCA LINEAR:
            # - Percorre toda a lista de vendas
            # - Compara cada invoice_no com o buscado
            # - Para quando encontra o primeiro match
            
            for venda in self.data.vendas:
                if venda['invoice_no'] == invoice_no:
                    return venda  # ‚úÖ Encontrou!
            
            # Se chegou aqui, n√£o encontrou nada
            return None  # ‚ùå N√£o encontrado
            
        except Exception as e:
            # üöë SEGURAN√áA: sempre tratar erros em opera√ß√µes de busca
            print(f"Erro ao buscar venda: {e}")
            return None
    
    def buscar_vendas_por_produto(self, stock_code: str) -> List[Dict[str, Any]]:
        """
          Busca com Filtro - List Comprehension
        
        Demonstra:
        - List comprehension (sintaxe compacta do Python)
        - Filtro por crit√©rio espec√≠fico
        - Retorno de lista (pode ter 0, 1 ou N resultados)
        
        Args:
            stock_code: C√≥digo do produto para filtrar
            
        Returns:
            List[Dict]: Lista de vendas do produto (pode estar vazia)
        """
        try:
            # üìú LIST COMPREHENSION EXPLICADA:
            # Sintaxe: [express√£o for item in lista if condi√ß√£o]
            # 
            # Equivale a:
            # resultado = []
            # for venda in self.data.vendas:
            #     if venda['stock_code'] == stock_code:
            #         resultado.append(venda)
            # return resultado
            
            return [venda for venda in self.data.vendas if venda['stock_code'] == stock_code]
            
        except Exception as e:
            print(f"Erro ao buscar vendas por produto: {e}")
            return []  # Lista vazia em caso de erro
    
    def buscar_vendas_por_pais(self, pais: str) -> List[Dict[str, Any]]:
        """
          Busca com Compara√ß√£o Case-Insensitive
        
        Demonstra:
        - Compara√ß√£o ignorando mai√∫sculas/min√∫sculas
        - M√©todo .lower() para normalizar strings
        - Busca mais amig√°vel ao usu√°rio
        
        Args:
            pais: Nome do pa√≠s (ex: "brasil", "Brasil", "BRASIL")
            
        Returns:
            List[Dict]: Vendas do pa√≠s (qualquer capitaliza√ß√£o)
        """
        try:
            # üî§ COMPARA√á√ÉO CASE-INSENSITIVE:
            # - .lower() converte para min√∫sculas
            # - "Brasil".lower() == "brasil".lower() √© True
            # - Usu√°rio pode digitar "brasil", "Brasil" ou "BRASIL"
            
            return [venda for venda in self.data.vendas 
                   if venda['country'].lower() == pais.lower()]
                   
        except Exception as e:
            print(f"Erro ao buscar vendas por pa√≠s: {e}")
            return []
    
    # ========================================================================
    # ‚úèÔ∏è UPDATE - ATUALIZAR REGISTROS EXISTENTES
    # ========================================================================
    
    def atualizar_venda(self, invoice_no: str, novos_dados: Dict[str, Any]) -> bool:
        """
          Opera√ß√£o UPDATE do CRUD
        
        Demonstra:
        - Busca com enumerate() para obter √≠ndice
        - Valida√ß√£o de campos permitidos (seguran√ßa)
        - Recalculo autom√°tico de campos derivados
        - Atualiza√ß√£o parcial (s√≥ campos fornecidos)
        
        Args:
            invoice_no: Identificador da venda
            novos_dados: Dicion√°rio com campos a atualizar
            
        Returns:
            bool: True se atualizou, False se n√£o encontrou
        """
        try:
            # üî¢ ENUMERATE PARA OBTER √çNDICE:
            # - enumerate(lista) retorna (index, item)
            # - Precisamos do √≠ndice para atualizar a posi√ß√£o correta
            
            for i, venda in enumerate(self.data.vendas):
                if venda['invoice_no'] == invoice_no:
                    
                    # ============================================================
                    # SEGURAN√áA: S√≥ PERMITIR CAMPOS ESPEC√çFICOS
                    # ============================================================
                    
                    # üîí Por que restringir campos?
                    # - Evita modifica√ß√£o acidental de dados cr√≠ticos
                    # - invoice_no nunca deve mudar (chave prim√°ria)
                    # - customer_id e country s√£o dados hist√≥ricos
                    
                    campos_permitidos = ['quantity', 'unit_price', 'description']
                    
                    for campo in campos_permitidos:
                        if campo in novos_dados:
                            # Atualizar apenas se campo foi fornecido
                            venda[campo] = novos_dados[campo]
                    
                    # ============================================================
                    # RECALCULAR CAMPOS DERIVADOS
                    # ============================================================
                    
                    # üìä Por que recalcular?
                    # - Total depende de quantity e unit_price
                    # - Se qualquer um mudou, total deve ser atualizado
                    # - Mant√©m consist√™ncia dos dados
                    
                    venda['total'] = venda['quantity'] * venda['unit_price']
                    
                    return True  # ‚úÖ Atualizou com sucesso
            
            return False  # ‚ùå N√£o encontrou a venda
            
        except Exception as e:
            print(f"Erro ao atualizar venda: {e}")
            return False
    
    # ========================================================================
    # üóëÔ∏è DELETE - REMOVER REGISTROS
    # ========================================================================
    
    def deletar_venda(self, invoice_no: str) -> bool:
        """
          Opera√ß√£o DELETE do CRUD
        
        Demonstra:
        - Busca com enumerate() para dele√ß√£o segura
        - Uso de del para remover item de lista
        - Dele√ß√£o por √≠ndice (mais eficiente)
        
        ‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o √© irrevers√≠vel!
        
        Args:
            invoice_no: Identificador da venda a deletar
            
        Returns:
            bool: True se deletou, False se n√£o encontrou
        """
        try:
            # üîç BUSCAR VENDA A DELETAR:
            for i, venda in enumerate(self.data.vendas):
                if venda['invoice_no'] == invoice_no:
                    
                    # ========================================================
                    # DELE√á√ÉO SEGURA POR √çNDICE
                    # ========================================================
                    
                    # üóëÔ∏è Por que del por √≠ndice?
                    # - del lista[index] √© mais eficiente
                    # - lista.remove(item) precisa buscar o item novamente
                    # - J√° temos o √≠ndice do enumerate()
                    
                    del self.data.vendas[i]
                    
                    return True  # ‚úÖ Deletou com sucesso
            
            return False  # ‚ùå N√£o encontrou para deletar
            
        except Exception as e:
            print(f"Erro ao deletar venda: {e}")
            return False
    
    def listar_todas_vendas(self) -> List[Dict[str, Any]]:
        """
          Opera√ß√£o READ - Listar Todos
        
        Demonstra:
        - Acesso direto √† estrutura de dados
        - Retorno de refer√™ncia (n√£o c√≥pia)
        - M√©todo simples mas essencial
        
        Returns:
            List[Dict]: Todas as vendas do sistema
        """
        # üìù RETORNO DIRETO:
        # - Retorna a lista original (n√£o uma c√≥pia)
        # - Mais eficiente em mem√≥ria
        # - Cuidado: modifica√ß√µes na lista retornada afetam os dados originais
        
        return self.data.vendas


# ============================================================================
# CLASSE RELATORIOSANALYTICS - Gera√ß√£o de Relat√≥rios e Estat√≠sticas
# ============================================================================

class RelatoriosAnalytics:
    """
      An√°lise de Dados e Relat√≥rios
    
    Esta classe demonstra conceitos avan√ßados de an√°lise:
    
    üìä M√âDIAS E ESTAT√çSTICAS:
    - C√°lculos matem√°ticos com dados reais
    - Agrega√ß√µes e totaliza√ß√µes
    - Indica√ß√£o de performance do neg√≥cio
    
    üèÜ RANKINGS:
    - Ordena√ß√£o de dados por crit√©rios
    - Identifica√ß√£o de tops performers
    - Uso de algoritmos de ordena√ß√£o
    
    üîç FILTROS:
    - Sele√ß√£o de dados por crit√©rios
    - Segmenta√ß√£o de informa√ß√µes
    - An√°lise focada em subconjuntos
    
    üìà RELAT√ìRIOS DETALHADOS:
    - Combina√ß√£o de m√∫ltiplas estat√≠sticas
    - Vis√£o hol√≠stica dos dados
    - Suporte √† tomada de decis√£o
    
    üí° PRINC√çPIO: Single Responsibility
    - Focada apenas em an√°lises e relat√≥rios
    - N√£o modifica dados, apenas consulta
    - Reaproveit√°vel para diferentes visualiza√ß√µes
    """
    
    def __init__(self, data_structure: DataStructure):
        """
        üèóÔ∏è CONSTRUTOR
        
        Recebe as estruturas de dados para an√°lise.
        Mant√©m separa√ß√£o entre dados e an√°lise.
        """
        self.data = data_structure
    
    def calcular_medias(self) -> Dict[str, float]:
        """
          C√°lculos Estat√≠sticos Fundamentais
        
        Demonstra:
        - Valida√ß√£o antes de c√°lculos (evita divis√£o por zero)
        - Fun√ß√£o sum() com generator expression
        - Agrega√ß√µes m√∫ltiplas de uma √∫nica passada
        - Retorno estruturado em dicion√°rio
        
        Returns:
            Dict[str, float]: M√©tricas calculadas do neg√≥cio
        """
        try:
            # ================================================================
            # VALIDA√á√ÉO INICIAL
            # ================================================================
            
            # üöë Por que validar primeiro?
            # - Evita divis√£o por zero
            # - Retorna resultado consistente (dict vazio)
            # - Falha r√°pida se n√£o h√° dados
            
            if not self.data.vendas:
                return {}  # Sem dados, sem c√°lculos
            
            # ================================================================
            # C√ÅLCULOS DE AGREGA√á√ÉO
            # ================================================================
            
            # üî¢ Contar total de vendas (base para todas as m√©dias)
            total_vendas = len(self.data.vendas)
            
            # üí∞ SOMA DE VALORES com Generator Expression:
            # sum(express√£o for item in lista) √© eficiente em mem√≥ria
            # N√£o cria lista tempor√°ria, processa item por item
            soma_valores = sum(venda['total'] for venda in self.data.vendas)
            
            # üì¶ Soma de quantidades vendidas
            soma_quantidades = sum(venda['quantity'] for venda in self.data.vendas)
            
            # ================================================================
            # RETORNO ESTRUTURADO
            # ================================================================
            
            # üìà Por que retornar dicion√°rio?
            # - Auto-documenta cada m√©trica
            # - F√°cil de acessar: resultado['receita_total']
            # - Extens√≠vel (f√°cil adicionar novas m√©tricas)
            
            return {
                # M√©dia de receita por venda individual
                'receita_media_por_venda': soma_valores / total_vendas,
                
                # M√©dia de itens por venda
                'quantidade_media_por_venda': soma_quantidades / total_vendas,
                
                # Pre√ßo m√©dio dos produtos (recalculado para demonstra√ß√£o)
                'preco_medio_unitario': sum(venda['unit_price'] for venda in self.data.vendas) / total_vendas,
                
                # Totais absolutos (n√£o s√£o m√©dias, mas √∫teis no contexto)
                'receita_total': soma_valores,
                'total_vendas': total_vendas
            }
            
        except Exception as e:
            # üöë Seguran√ßa: sempre tratar erros em c√°lculos
            print(f"Erro ao calcular m√©dias: {e}")
            return {}  # Retorno consistente mesmo com erro
    
    def ranking_produtos_mais_vendidos(self, top_n: int = 10) -> List[Tuple[str, Dict[str, Any]]]:
        """
          Algoritmo de Ordena√ß√£o e Rankings
        
        Demonstra:
        - Fun√ß√£o sorted() para ordena√ß√£o personalizada
        - Lambda functions para crit√©rios de ordena√ß√£o
        - Slicing de listas para limitar resultados
        - Trabalho com tuplas como retorno
        
        Args:
            top_n: Quantos produtos incluir no ranking (padr√£o 10)
            
        Returns:
            List[Tuple]: Lista de tuplas (stock_code, dados_produto)
        """
        try:
            # ================================================================
            # ALGORITMO DE ORDENA√á√ÉO PERSONALIZADA
            # ================================================================
            
            # üîÑ SORTED() COM KEY PERSONALIZADA:
            # - sorted() n√£o modifica o dicion√°rio original
            # - .items() retorna tuplas (chave, valor)
            # - lambda x: x[1]['quantidade_total'] define crit√©rio
            # - reverse=True para ordem decrescente (maior primeiro)
            
            produtos_ordenados = sorted(
                self.data.produtos.items(),  # Lista de tuplas (stock_code, dados)
                
                # üéØ LAMBDA FUNCTION EXPLICADA:
                # x = (stock_code, dados_produto)
                # x[0] = stock_code (string)
                # x[1] = dados_produto (dicion√°rio)
                # x[1]['quantidade_total'] = crit√©rio de ordena√ß√£o
                key=lambda x: x[1]['quantidade_total'],
                
                reverse=True  # Decrescente: maior quantidade primeiro
            )
            
            # ================================================================
            # SLICING PARA LIMITAR RESULTADOS
            # ================================================================
            
            # üî¢ [:top_n] = pega os primeiros top_n elementos
            # Exemplo: [:5] pega os 5 primeiros
            # Se lista tem menos elementos, retorna todos
            
            return produtos_ordenados[:top_n]
            
        except Exception as e:
            print(f"Erro ao gerar ranking de produtos: {e}")
            return []  # Lista vazia em caso de erro
    
    def ranking_paises_por_vendas(self, top_n: int = 10) -> List[Tuple[str, int]]:
        """Gera ranking dos pa√≠ses por n√∫mero de vendas"""
        try:
            return self.data.contador_vendas_pais.most_common(top_n)
        except Exception as e:
            print(f"Erro ao gerar ranking de pa√≠ses: {e}")
            return []
    
    def filtrar_vendas_por_valor(self, valor_minimo: float = 0, valor_maximo: float = float('inf')) -> List[Dict[str, Any]]:
        """Filtra vendas por faixa de valor"""
        try:
            return [
                venda for venda in self.data.vendas 
                if valor_minimo <= venda['total'] <= valor_maximo
            ]
        except Exception as e:
            print(f"Erro ao filtrar vendas por valor: {e}")
            return []
    
    def relatorio_por_pais(self, pais: str) -> Dict[str, Any]:
        """Gera relat√≥rio detalhado por pa√≠s"""
        try:
            vendas_pais = [venda for venda in self.data.vendas if venda['country'].lower() == pais.lower()]
            
            if not vendas_pais:
                return {'erro': f'Nenhuma venda encontrada para {pais}'}
            
            receita_total = sum(venda['total'] for venda in vendas_pais)
            quantidade_total = sum(venda['quantity'] for venda in vendas_pais)
            
            produtos_unicos = set(venda['stock_code'] for venda in vendas_pais)
            clientes_unicos = set(venda['customer_id'] for venda in vendas_pais if venda['customer_id'])
            
            return {
                'pais': pais,
                'total_vendas': len(vendas_pais),
                'receita_total': receita_total,
                'quantidade_total': quantidade_total,
                'receita_media': receita_total / len(vendas_pais),
                'produtos_unicos': len(produtos_unicos),
                'clientes_unicos': len(clientes_unicos)
            }
        except Exception as e:
            print(f"Erro ao gerar relat√≥rio por pa√≠s: {e}")
            return {'erro': str(e)}


# ============================================================================
# CLASSE EXPORTADORCSV - Exporta√ß√£o de Dados para Arquivos
# ============================================================================

class ExportadorCSV:
    """
      Manipula√ß√£o de Arquivos e Exporta√ß√£o de Dados
    
    Esta classe demonstra conceitos fundamentais:
    
    üìÅ MANIPULA√á√ÉO DE ARQUIVOS:
    - Abertura e fechamento de arquivos
    - Context managers (with statement)
    - Encoding para caracteres especiais
    
    üìä FORMATO CSV:
    - Comma Separated Values (padr√£o universal)
    - Compat√≠vel com Excel, Google Sheets, etc.
    - F√°cil de importar em outras ferramentas
    
    üîÑ TRANSFORMA√á√ÉO DE DADOS:
    - Convers√£o de estruturas Python para CSV
    - Padroniza√ß√£o de formatos
    - Tratamento de caracteres especiais
    
    üõ†Ô∏è BIBLIOTECA CSV:
    - DictWriter para escrita estruturada
    - Gera√ß√£o autom√°tica de cabe√ßalhos
    - Escapamento autom√°tico de caracteres especiais
    

    """
    
    def __init__(self, data_structure: DataStructure):
        """
        üèóÔ∏è CONSTRUTOR
        
        Mant√©m refer√™ncia aos dados para exporta√ß√£o.
        Separar exporta√ß√£o em classe pr√≥pria √© boa pr√°tica.
        """
        self.data = data_structure
    
    def exportar_vendas(self, nome_arquivo: str = 'vendas_export.csv') -> bool:
        """
          Exporta√ß√£o de Dados para CSV
        
        Demonstra:
        - Context manager (with statement)
        - Par√¢metros de abertura de arquivo
        - Uso da biblioteca CSV do Python
        - Gera√ß√£o autom√°tica de cabe√ßalhos
        - Valida√ß√£o antes da exporta√ß√£o
        
        Args:
            nome_arquivo: Nome do arquivo CSV a criar
            
        Returns:
            bool: True se exportou com sucesso
        """
        try:
            # ================================================================
            # CONTEXT MANAGER - ABERTURA SEGURA DE ARQUIVO
            # ================================================================
            
            # üîí WITH STATEMENT:
            # - Garante fechamento autom√°tico do arquivo
            # - Mesmo se der erro, arquivo ser√° fechado
            # - Equivale a: arquivo = open(...); try: ... finally: arquivo.close()
            
            with open(nome_arquivo, 'w', newline='', encoding='utf-8') as arquivo:
                #     ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                # üìÑ PAR√ÇMETROS DE ABERTURA EXPLICADOS:
                # - 'w': write mode (sobrescreve arquivo existente)
                # - newline='': evita linhas em branco extras no CSV
                # - encoding='utf-8': suporte a acentos e caracteres especiais
                
                # ============================================================
                # VALIDA√á√ÉO ANTES DE EXPORTAR
                # ============================================================
                
                if not self.data.vendas:
                    print("Nenhuma venda para exportar")
                    return False
                
                # ============================================================
                # CONFIGURA√á√ÉO DO DICTWRITER
                # ============================================================
                
                # üìù FIELDNAMES AUTOM√ÅTICOS:
                # - Pega chaves do primeiro dicion√°rio
                # - Assume que todos t√™m as mesmas chaves
                # - Cria colunas automaticamente
                fieldnames = self.data.vendas[0].keys()
                
                # üìä DICTWRITER:
                # - Especializado em escrever dicion√°rios como CSV
                # - Converte automaticamente valores para string
                # - Trata escaping de caracteres especiais
                writer = csv.DictWriter(arquivo, fieldnames=fieldnames)
                
                # ============================================================
                # ESCRITA DOS DADOS
                # ============================================================
                
                # üè∑Ô∏è Escrever cabe√ßalho (nomes das colunas)
                writer.writeheader()
                
                # üìù Escrever todas as linhas de dados
                # writerows() escreve lista de dicion√°rios de uma vez
                writer.writerows(self.data.vendas)
                
                # ============================================================
                # CONFIRMA√á√ÉO DE SUCESSO
                # ============================================================
                
                print(f"Vendas exportadas com sucesso para {nome_arquivo}")
                return True
                
        except Exception as e:
            # üöë Tratar erros de arquivo (permiss√£o, espa√ßo, etc.)
            print(f"Erro ao exportar vendas: {e}")
            return False
    
    def exportar_relatorio_produtos(self, nome_arquivo: str = 'produtos_relatorio.csv') -> bool:
        """Exporta relat√≥rio de produtos para CSV"""
        try:
            with open(nome_arquivo, 'w', newline='', encoding='utf-8') as arquivo:
                fieldnames = ['stock_code', 'description', 'vendas_total', 'quantidade_total', 'receita_total']
                writer = csv.DictWriter(arquivo, fieldnames=fieldnames)
                writer.writeheader()
                
                for stock_code, dados in self.data.produtos.items():
                    row = {'stock_code': stock_code, **dados}
                    writer.writerow(row)
                
                print(f"Relat√≥rio de produtos exportado para {nome_arquivo}")
                return True
                
        except Exception as e:
            print(f"Erro ao exportar relat√≥rio de produtos: {e}")
            return False
    
    def exportar_relatorio_paises(self, nome_arquivo: str = 'paises_relatorio.csv') -> bool:
        """Exporta relat√≥rio de pa√≠ses para CSV"""
        try:
            with open(nome_arquivo, 'w', newline='', encoding='utf-8') as arquivo:
                fieldnames = ['pais', 'total_vendas']
                writer = csv.DictWriter(arquivo, fieldnames=fieldnames)
                writer.writeheader()
                
                for pais, total in self.data.contador_vendas_pais.items():
                    writer.writerow({'pais': pais, 'total_vendas': total})
                
                print(f"Relat√≥rio de pa√≠ses exportado para {nome_arquivo}")
                return True
                
        except Exception as e:
            print(f"Erro ao exportar relat√≥rio de pa√≠ses: {e}")
            return False


# ============================================================================
# CLASSE ECOMMERCESYSTEM - Sistema Principal (Orquestrador)
# ============================================================================

class EcommerceSystem:
    """
      Padr√£o de Arquitetura - Facade e Composition
    
    Esta √© a classe principal que demonstra:
    
    üè¢ PADR√ÉO FACADE:
    - Interface simples para sistema complexo
    - Esconde complexidade das classes internas
    - Ponto √∫nico de acesso para funcionalidades
    
    üîß COMPOSI√á√ÉO:
    - Usa outras classes como componentes
    - Cada classe tem responsabilidade espec√≠fica
    - Sistema modular e manuten√≠vel
    
    üí¨ INTERFACE DE USU√ÅRIO:
    - Menus interativos
    - Valida√ß√µes de entrada
    - Feedback claro ao usu√°rio
    
    üîÑ FLUXO DE CONTROLE:
    - Coordena opera√ß√µes entre classes
    - Gerencia estado da aplica√ß√£o
    - Trata exce√ß√µes de alto n√≠vel
    
    üí° BENEF√çCIOS:
    - C√≥digo organizado e leg√≠vel
    - F√°cil manuten√ß√£o e extens√£o
    - Reutiliza√ß√£o de componentes
    - Testabilidade individual
    """
    
    def __init__(self):
        """
        üèóÔ∏è CONSTRUTOR - Inicializa√ß√£o do Sistema
        
        Demonstra:
        - Composi√ß√£o de objetos
        - Inje√ß√£o de depend√™ncia manual
        - Estado inicial da aplica√ß√£o
        """
        
        # ================================================================
        # INICIALIZA√á√ÉO DOS COMPONENTES
        # ================================================================
        
        # üìÅ ESTRUTURA DE DADOS (componente central)
        self.data_structure = DataStructure()
        
        # üîß INJE√á√ÉO DE DEPEND√äNCIA:
        # - Todas as classes recebem a mesma inst√¢ncia de DataStructure
        # - Garante consist√™ncia entre componentes
        # - Compartilha os mesmos dados
        
        # üîç CRUD (opera√ß√µes b√°sicas)
        self.crud = EcommerceCRUD(self.data_structure)
        
        # üìà RELAT√ìRIOS (anal√≠ticas)
        self.relatorios = RelatoriosAnalytics(self.data_structure)
        
        # üíæ EXPORTADOR (arquivos)
        self.exportador = ExportadorCSV(self.data_structure)
        
        # ================================================================
        # CONTROLE DE ESTADO
        # ================================================================
        
        # üìä FLAG DE CONTROLE:
        # - Impede opera√ß√µes sem dados carregados
        # - Melhora experi√™ncia do usu√°rio
        # - Evita erros e confus√£o
        self.dataset_carregado = False
    
    def carregar_dataset_kaggle(self) -> bool:
        """
          Integra√ß√£o com APIs Externas e Processamento de Dados
        
        Demonstra:
        - Uso de bibliotecas de terceiros (kagglehub)
        - Manipula√ß√£o de caminhos de arquivos
        - Leitura de CSV com DictReader
        - Processamento em lote com feedback
        - Tratamento de diferentes tipos de erro
        
        Returns:
            bool: True se carregou com sucesso
        """
        try:
            print("üîÑ Carregando dataset do Kaggle...")
            
            # ================================================================
            # DOWNLOAD DO DATASET VIA API
            # ================================================================
            
            # üåé INTEGRA√á√ÉO COM KAGGLE:
            # - kagglehub √© biblioteca oficial do Kaggle
            # - Faz download autom√°tico do dataset
            # - Retorna caminho onde salvou os arquivos
            caminho_dos_arquivos = kagglehub.dataset_download("carrie1/ecommerce-data")
            
            # ================================================================
            # EXPLORA√á√ÉO DOS ARQUIVOS BAIXADOS
            # ================================================================
            
            # üìÅ LISTAR ARQUIVOS:
            print(f"üìÅ Arquivos encontrados em: {caminho_dos_arquivos}")
            arquivos = os.listdir(caminho_dos_arquivos)
            for arquivo in arquivos:
                print(f"   - {arquivo}")
            
            # ================================================================
            # CONSTRU√á√ÉO DO CAMINHO DO ARQUIVO
            # ================================================================
            
            # üõ§Ô∏è OS.PATH.JOIN:
            # - Une caminhos de forma compat√≠vel com o SO
            # - Evita problemas de portabilidade
            caminho_csv = os.path.join(caminho_dos_arquivos, "data.csv")
            
            # üîç VERIFICA√á√ÉO DE EXIST√äNCIA:
            if not os.path.exists(caminho_csv):
                raise FileNotFoundError(f"Arquivo data.csv n√£o encontrado em {caminho_dos_arquivos}")
            
            print(f"üìä Carregando dados de: {caminho_csv}")
            
            # ================================================================
            # ABERTURA DO ARQUIVO CSV COM ENCODING LATIN-1
            # ================================================================
            
            # üí° ENCODING LATIN-1:
            # - ISO-8859-1 (Europa Ocidental)
            # - Suporta caracteres especiais como ¬£ (libra esterlina)
            # - Padr√£o para datasets de e-commerce brit√¢nicos
            # - Resolve o erro 'utf-8' codec can't decode byte 0xa3
            
            print("üîß Abrindo arquivo com encoding latin-1...")
            arquivo_csv = open(caminho_csv, mode='r', encoding='latin-1')
            print("‚úÖ Arquivo aberto com sucesso!")
            
            # ================================================================
            # PROCESSAMENTO DO ARQUIVO
            # ================================================================
            
            try:
                leitor_csv = csv.DictReader(arquivo_csv)
                
                # üìã MOSTRAR ESTRUTURA DOS DADOS
                print("üìã Colunas encontradas:")
                for coluna in leitor_csv.fieldnames:
                    print(f"   - {coluna}")
                
                # ============================================================
                # PROCESSAMENTO EM LOTE COM FEEDBACK
                # ============================================================
                
                # üìà CONTADORES PARA ESTAT√çSTICAS:
                registros_carregados = 0
                registros_com_erro = 0
                registros_encoding_erro = 0  # Novo contador para erros de encoding
                
                # üîÑ PROCESSAMENTO LINHA POR LINHA COM TRATAMENTO DE ERRO:
                for numero_linha, registro in enumerate(leitor_csv, start=2):  # start=2 (cabe√ßalho = linha 1)
                    try:
                        # Tentar adicionar cada registro
                        if self.data_structure.adicionar_venda(registro):
                            registros_carregados += 1
                        else:
                            registros_com_erro += 1
                            
                    except UnicodeDecodeError as e:
                        # üö® ERRO DE ENCODING EM LINHA ESPEC√çFICA:
                        # - Alguns caracteres podem ainda causar problemas
                        # - Registra erro mas continua processamento
                        registros_encoding_erro += 1
                        print(f"‚ö†Ô∏è Erro de encoding na linha {numero_linha}: {e}")
                        continue
                        
                    except Exception as e:
                        # üö® OUTROS ERROS DE PROCESSAMENTO:
                        registros_com_erro += 1
                        if registros_com_erro <= 5:  # Mostrar apenas primeiros 5 erros
                            print(f"‚ö†Ô∏è Erro na linha {numero_linha}: {e}")
                        continue
                    
                    # üìà FEEDBACK DE PROGRESSO:
                    # - A cada 50.000 registros, mostra progresso
                    # - Usu√°rio sabe que sistema n√£o travou
                    # - √ötil para datasets grandes
                    if registros_carregados % 50000 == 0 and registros_carregados > 0:
                        print(f"   ‚úÖ {registros_carregados} registros carregados...")
                
                # ============================================================
                # RELAT√ìRIO FINAL DE CARREGAMENTO COM ENCODING
                # ============================================================
                
                print(f"‚úÖ Dataset carregado com sucesso!")
                print(f"   üéØ Encoding usado: latin-1")
                print(f"   üìà Total de vendas: {registros_carregados}")
                print(f"   üì¶ Total de produtos: {len(self.data_structure.produtos)}")
                print(f"   üë• Total de clientes: {len(self.data_structure.clientes)}")
                print(f"   üåç Total de pa√≠ses: {len(self.data_structure.paises)}")
                
                # ‚ö†Ô∏è RELAT√ìRIO DE PROBLEMAS:
                if registros_com_erro > 0:
                    print(f"   ‚ö†Ô∏è  Registros com erro de dados: {registros_com_erro}")
                if registros_encoding_erro > 0:
                    print(f"   üî§ Registros com erro de encoding: {registros_encoding_erro}")
                

                print(f"   üìñ Isso √© comum em dados de pa√≠ses que usam caracteres especiais como ¬£")
                print(f"   üåç Latin-1 resolve problemas com s√≠mbolos monet√°rios europeus")
                
                # ============================================================
                # ATUALIZAR ESTADO DO SISTEMA
                # ============================================================
                
                self.dataset_carregado = True
                return True
                
            except Exception as e:
                # üö® ERRO DURANTE PROCESSAMENTO:
                print(f"‚ùå Erro durante processamento: {e}")
                return False
                
            finally:
                # ============================================================
                # LIMPEZA: FECHAR ARQUIVO SEMPRE
                # ============================================================
                
                # üßπ FINALLY sempre executa:
                # - Mesmo se der erro, arquivo ser√° fechado
                # - Evita vazamentos de recursos
                # - Boa pr√°tica de programa√ß√£o
                if arquivo_csv:
                    arquivo_csv.close()
                    print("üîí Arquivo fechado com seguran√ßa")
                
        except FileNotFoundError as e:
            # üìÅ Erro espec√≠fico de arquivo
            print(f"‚ùå Arquivo n√£o encontrado: {e}")
            return False
        except Exception as e:
            # üöë Qualquer outro erro
            print(f"‚ùå Erro ao carregar dataset: {e}")
            return False
    
    def mostrar_menu_principal(self):
        """Mostra o menu principal do sistema"""
        print("\n" + "="*60)
        print("üõí SISTEMA DE AN√ÅLISE DE E-COMMERCE")
        print("="*60)
        print("1. üìä Carregar Dataset do Kaggle")
        print("2. üîç Opera√ß√µes CRUD")
        print("3. üìà Relat√≥rios e An√°lises")
        print("4. üíæ Exportar Dados (CSV)")
        print("5. üìã Visualizar Dados")
        print("0. üö™ Sair")
        print("="*60)
    
    def menu_crud(self):
        """Menu para opera√ß√µes CRUD"""
        while True:
            print("\n" + "-"*40)
            print("üîç OPERA√á√ïES CRUD")
            print("-"*40)
            print("1. ‚ûï Criar Nova Venda")
            print("2. üîé Buscar Venda")
            print("3. ‚úèÔ∏è  Atualizar Venda")
            print("4. üóëÔ∏è  Deletar Venda")
            print("5. üìã Listar Todas Vendas")
            print("0. ‚¨ÖÔ∏è  Voltar")
            print("-"*40)
            
            opcao = input("Digite sua op√ß√£o: ").strip()
            
            if opcao == '1':
                self._criar_nova_venda()
            elif opcao == '2':
                self._buscar_venda()
            elif opcao == '3':
                self._atualizar_venda()
            elif opcao == '4':
                self._deletar_venda()
            elif opcao == '5':
                self._listar_vendas()
            elif opcao == '0':
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
    
    def _criar_nova_venda(self):
        """Interface para criar nova venda"""
        try:
            print("\n‚ûï CRIAR NOVA VENDA")
            print("-" * 30)
            
            dados_venda = {}
            dados_venda['InvoiceNo'] = input("N√∫mero da Fatura: ")
            dados_venda['StockCode'] = input("C√≥digo do Produto: ")
            dados_venda['Description'] = input("Descri√ß√£o: ")
            dados_venda['Quantity'] = input("Quantidade: ")
            dados_venda['UnitPrice'] = input("Pre√ßo Unit√°rio: ")
            dados_venda['CustomerID'] = input("ID do Cliente: ")
            dados_venda['Country'] = input("Pa√≠s: ")
            dados_venda['InvoiceDate'] = datetime.now().strftime("%m/%d/%Y %H:%M")
            
            if self.crud.criar_venda(dados_venda):
                print("‚úÖ Venda criada com sucesso!")
            else:
                print("‚ùå Erro ao criar venda!")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _buscar_venda(self):
        """Interface para buscar venda"""
        try:
            invoice_no = input("Digite o n√∫mero da fatura: ")
            venda = self.crud.buscar_venda_por_invoice(invoice_no)
            
            if venda:
                print("\n‚úÖ Venda encontrada:")
                self._exibir_venda(venda)
            else:
                print("‚ùå Venda n√£o encontrada!")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _atualizar_venda(self):
        """Interface para atualizar venda"""
        try:
            invoice_no = input("Digite o n√∫mero da fatura para atualizar: ")
            venda = self.crud.buscar_venda_por_invoice(invoice_no)
            
            if not venda:
                print("‚ùå Venda n√£o encontrada!")
                return
            
            print("\nüìù Venda atual:")
            self._exibir_venda(venda)
            
            print("\n‚úèÔ∏è Digite os novos valores (Enter para manter atual):")
            novos_dados = {}
            
            novo_qty = input(f"Quantidade atual ({venda['quantity']}): ")
            if novo_qty.strip():
                novos_dados['quantity'] = int(novo_qty)
            
            novo_price = input(f"Pre√ßo atual ({venda['unit_price']}): ")
            if novo_price.strip():
                novos_dados['unit_price'] = float(novo_price)
            
            nova_desc = input(f"Descri√ß√£o atual ({venda['description']}): ")
            if nova_desc.strip():
                novos_dados['description'] = nova_desc
            
            if novos_dados and self.crud.atualizar_venda(invoice_no, novos_dados):
                print("‚úÖ Venda atualizada com sucesso!")
            else:
                print("‚ùå Nenhuma altera√ß√£o realizada!")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _deletar_venda(self):
        """Interface para deletar venda"""
        try:
            invoice_no = input("Digite o n√∫mero da fatura para deletar: ")
            venda = self.crud.buscar_venda_por_invoice(invoice_no)
            
            if not venda:
                print("‚ùå Venda n√£o encontrada!")
                return
            
            print("\nüóëÔ∏è Venda a ser deletada:")
            self._exibir_venda(venda)
            
            confirmacao = input("\n‚ö†Ô∏è Confirma a exclus√£o? (s/N): ").lower()
            if confirmacao == 's':
                if self.crud.deletar_venda(invoice_no):
                    print("‚úÖ Venda deletada com sucesso!")
                else:
                    print("‚ùå Erro ao deletar venda!")
            else:
                print("‚ùå Opera√ß√£o cancelada!")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _listar_vendas(self):
        """Interface para listar vendas"""
        try:
            vendas = self.crud.listar_todas_vendas()
            
            if not vendas:
                print("‚ùå Nenhuma venda encontrada!")
                return
            
            print(f"\nüìã Total de vendas: {len(vendas)}")
            
            # Op√ß√£o de pagina√ß√£o
            pagina = 0
            itens_por_pagina = 10
            
            while True:
                inicio = pagina * itens_por_pagina
                fim = inicio + itens_por_pagina
                vendas_pagina = vendas[inicio:fim]
                
                if not vendas_pagina:
                    print("‚ùå Fim da lista!")
                    break
                
                print(f"\nüìÑ P√°gina {pagina + 1} (itens {inicio + 1}-{min(fim, len(vendas))} de {len(vendas)}):")
                print("-" * 80)
                
                for venda in vendas_pagina:
                    print(f"üßæ {venda['invoice_no']} | {venda['stock_code']} | "
                          f"{venda['description'][:30]}... | Qtd: {venda['quantity']} | "
                          f"Total: R$ {venda['total']:.2f}")
                
                if fim >= len(vendas):
                    break
                
                continuar = input("\n‚û°Ô∏è Pr√≥xima p√°gina? (s/N): ").lower()
                if continuar != 's':
                    break
                
                pagina += 1
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _exibir_venda(self, venda: Dict[str, Any]):
        """Exibe uma venda formatada"""
        print("-" * 50)
        print(f"üßæ Fatura: {venda['invoice_no']}")
        print(f"üì¶ Produto: {venda['stock_code']} - {venda['description']}")
        print(f"üìä Quantidade: {venda['quantity']}")
        print(f"üí∞ Pre√ßo Unit√°rio: R$ {venda['unit_price']:.2f}")
        print(f"üí≥ Total: R$ {venda['total']:.2f}")
        print(f"üë§ Cliente: {venda['customer_id']}")
        print(f"üåç Pa√≠s: {venda['country']}")
        print(f"üìÖ Data: {venda['invoice_date']}")
        print("-" * 50)
    
    def menu_relatorios(self):
        """Menu para relat√≥rios e an√°lises"""
        while True:
            print("\n" + "-"*40)
            print("üìà RELAT√ìRIOS E AN√ÅLISES")
            print("-"*40)
            print("1. üìä M√©dias Gerais")
            print("2. üèÜ Ranking Produtos Mais Vendidos")
            print("3. üåç Ranking Pa√≠ses por Vendas")
            print("4. üí∞ Filtrar por Faixa de Valor")
            print("5. üáßüá∑ Relat√≥rio por Pa√≠s")
            print("0. ‚¨ÖÔ∏è Voltar")
            print("-"*40)
            
            opcao = input("Digite sua op√ß√£o: ").strip()
            
            if opcao == '1':
                self._mostrar_medias()
            elif opcao == '2':
                self._mostrar_ranking_produtos()
            elif opcao == '3':
                self._mostrar_ranking_paises()
            elif opcao == '4':
                self._filtrar_por_valor()
            elif opcao == '5':
                self._relatorio_por_pais()
            elif opcao == '0':
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
    
    def _mostrar_medias(self):
        """Mostra m√©dias gerais do sistema"""
        try:
            if not self.dataset_carregado:
                print("‚ùå Carregue o dataset primeiro!")
                return
            
            medias = self.relatorios.calcular_medias()
            
            if not medias:
                print("‚ùå Nenhum dado dispon√≠vel!")
                return
            
            print("\nüìä M√âDIAS GERAIS")
            print("=" * 50)
            print(f"üí∞ Receita Total: R$ {medias['receita_total']:,.2f}")
            print(f"üõí Total de Vendas: {medias['total_vendas']:,}")
            print(f"üìà Receita M√©dia por Venda: R$ {medias['receita_media_por_venda']:.2f}")
            print(f"üì¶ Quantidade M√©dia por Venda: {medias['quantidade_media_por_venda']:.2f}")
            print(f"üíµ Pre√ßo M√©dio Unit√°rio: R$ {medias['preco_medio_unitario']:.2f}")
            print("=" * 50)
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _mostrar_ranking_produtos(self):
        """Mostra ranking de produtos mais vendidos"""
        try:
            if not self.dataset_carregado:
                print("‚ùå Carregue o dataset primeiro!")
                return
            
            top_n = int(input("Quantos produtos mostrar (padr√£o 10): ") or "10")
            ranking = self.relatorios.ranking_produtos_mais_vendidos(top_n)
            
            if not ranking:
                print("‚ùå Nenhum produto encontrado!")
                return
            
            print(f"\nüèÜ TOP {top_n} PRODUTOS MAIS VENDIDOS")
            print("=" * 80)
            
            for i, (stock_code, dados) in enumerate(ranking, 1):
                print(f"{i:2d}. üì¶ {stock_code}")
                print(f"     üìù {dados['description'][:50]}...")
                print(f"     üìä Qtd Vendida: {dados['quantidade_total']:,}")
                print(f"     üí∞ Receita: R$ {dados['receita_total']:,.2f}")
                print(f"     üõí N¬∫ Vendas: {dados['vendas_total']:,}")
                print("-" * 80)
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _mostrar_ranking_paises(self):
        """Mostra ranking de pa√≠ses por vendas"""
        try:
            if not self.dataset_carregado:
                print("‚ùå Carregue o dataset primeiro!")
                return
            
            top_n = int(input("Quantos pa√≠ses mostrar (padr√£o 10): ") or "10")
            ranking = self.relatorios.ranking_paises_por_vendas(top_n)
            
            if not ranking:
                print("‚ùå Nenhum pa√≠s encontrado!")
                return
            
            print(f"\nüåç TOP {top_n} PA√çSES POR VENDAS")
            print("=" * 50)
            
            for i, (pais, total_vendas) in enumerate(ranking, 1):
                print(f"{i:2d}. üè≥Ô∏è {pais:<20} | üõí {total_vendas:,} vendas")
            
            print("=" * 50)
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _filtrar_por_valor(self):
        """Filtra vendas por faixa de valor"""
        try:
            if not self.dataset_carregado:
                print("‚ùå Carregue o dataset primeiro!")
                return
            
            valor_min = float(input("Valor m√≠nimo (0): ") or "0")
            valor_max = float(input("Valor m√°ximo (sem limite): ") or "inf")
            
            vendas_filtradas = self.relatorios.filtrar_vendas_por_valor(valor_min, valor_max)
            
            if not vendas_filtradas:
                print("‚ùå Nenhuma venda encontrada nesta faixa!")
                return
            
            print(f"\nüí∞ VENDAS ENTRE R$ {valor_min:.2f} E R$ {valor_max:.2f}")
            print("=" * 80)
            print(f"üìä Total encontrado: {len(vendas_filtradas)} vendas")
            
            receita_total = sum(venda['total'] for venda in vendas_filtradas)
            print(f"üí∞ Receita Total: R$ {receita_total:,.2f}")
            print(f"üìà Receita M√©dia: R$ {receita_total / len(vendas_filtradas):.2f}")
            
            # Mostrar algumas vendas
            mostrar_detalhes = input("\nüîç Mostrar vendas detalhadas? (s/N): ").lower()
            if mostrar_detalhes == 's':
                for i, venda in enumerate(vendas_filtradas[:20]):  # M√°ximo 20
                    print(f"\n{i+1}. üßæ {venda['invoice_no']} | {venda['stock_code']} | "
                          f"Total: R$ {venda['total']:.2f}")
                
                if len(vendas_filtradas) > 20:
                    print(f"\n... e mais {len(vendas_filtradas) - 20} vendas")
                
        except ValueError:
            print("‚ùå Valor inv√°lido!")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _relatorio_por_pais(self):
        """Gera relat√≥rio detalhado por pa√≠s"""
        try:
            if not self.dataset_carregado:
                print("‚ùå Carregue o dataset primeiro!")
                return
            
            pais = input("Digite o nome do pa√≠s: ").strip()
            if not pais:
                print("‚ùå Nome do pa√≠s √© obrigat√≥rio!")
                return
            
            relatorio = self.relatorios.relatorio_por_pais(pais)
            
            if 'erro' in relatorio:
                print(f"‚ùå {relatorio['erro']}")
                return
            
            print(f"\nüáßüá∑ RELAT√ìRIO - {relatorio['pais'].upper()}")
            print("=" * 60)
            print(f"üõí Total de Vendas: {relatorio['total_vendas']:,}")
            print(f"üí∞ Receita Total: R$ {relatorio['receita_total']:,.2f}")
            print(f"üì¶ Quantidade Total: {relatorio['quantidade_total']:,}")
            print(f"üìà Receita M√©dia: R$ {relatorio['receita_media']:.2f}")
            print(f"üéØ Produtos √önicos: {relatorio['produtos_unicos']:,}")
            print(f"üë• Clientes √önicos: {relatorio['clientes_unicos']:,}")
            print("=" * 60)
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def menu_exportacao(self):
        """Menu para exporta√ß√£o de dados"""
        while True:
            print("\n" + "-"*40)
            print("üíæ EXPORTAR DADOS (CSV)")
            print("-"*40)
            print("1. üìä Exportar Todas as Vendas")
            print("2. üì¶ Exportar Relat√≥rio de Produtos")
            print("3. üåç Exportar Relat√≥rio de Pa√≠ses")
            print("0. ‚¨ÖÔ∏è Voltar")
            print("-"*40)
            
            opcao = input("Digite sua op√ß√£o: ").strip()
            
            if opcao == '1':
                nome_arquivo = input("Nome do arquivo (vendas_export.csv): ") or "vendas_export.csv"
                self.exportador.exportar_vendas(nome_arquivo)
            elif opcao == '2':
                nome_arquivo = input("Nome do arquivo (produtos_relatorio.csv): ") or "produtos_relatorio.csv"
                self.exportador.exportar_relatorio_produtos(nome_arquivo)
            elif opcao == '3':
                nome_arquivo = input("Nome do arquivo (paises_relatorio.csv): ") or "paises_relatorio.csv"
                self.exportador.exportar_relatorio_paises(nome_arquivo)
            elif opcao == '0':
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
    
    def menu_visualizacao(self):
        """Menu para visualiza√ß√£o de dados"""
        while True:
            print("\n" + "-"*40)
            print("üìã VISUALIZAR DADOS")
            print("-"*40)
            print("1. üìà Estat√≠sticas Gerais")
            print("2. üì¶ Lista de Produtos")
            print("3. üë• Lista de Clientes")
            print("4. üåç Lista de Pa√≠ses")
            print("5. üîç Buscar por Produto")
            print("6. üîç Buscar por Pa√≠s")
            print("0. ‚¨ÖÔ∏è Voltar")
            print("-"*40)
            
            opcao = input("Digite sua op√ß√£o: ").strip()
            
            if opcao == '1':
                self._mostrar_estatisticas_gerais()
            elif opcao == '2':
                self._listar_produtos()
            elif opcao == '3':
                self._listar_clientes()
            elif opcao == '4':
                self._listar_paises()
            elif opcao == '5':
                self._buscar_por_produto()
            elif opcao == '6':
                self._buscar_por_pais()
            elif opcao == '0':
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
    
    def _mostrar_estatisticas_gerais(self):
        """Mostra estat√≠sticas gerais do sistema"""
        if not self.dataset_carregado:
            print("‚ùå Carregue o dataset primeiro!")
            return
        
        print("\nüìà ESTAT√çSTICAS GERAIS")
        print("=" * 50)
        print(f"üõí Total de Vendas: {len(self.data_structure.vendas):,}")
        print(f"üì¶ Total de Produtos: {len(self.data_structure.produtos):,}")
        print(f"üë• Total de Clientes: {len(self.data_structure.clientes):,}")
        print(f"üåç Total de Pa√≠ses: {len(self.data_structure.paises):,}")
        print("=" * 50)
    
    def _listar_produtos(self):
        """Lista produtos cadastrados"""
        if not self.data_structure.produtos:
            print("‚ùå Nenhum produto encontrado!")
            return
        
        produtos = list(self.data_structure.produtos.items())
        pagina = 0
        itens_por_pagina = 10
        
        while True:
            inicio = pagina * itens_por_pagina
            fim = inicio + itens_por_pagina
            produtos_pagina = produtos[inicio:fim]
            
            if not produtos_pagina:
                print("‚ùå Fim da lista!")
                break
            
            print(f"\nüì¶ PRODUTOS - P√°gina {pagina + 1}")
            print("-" * 80)
            
            for stock_code, dados in produtos_pagina:
                print(f"üè∑Ô∏è {stock_code} | {dados['description'][:40]}...")
                print(f"   üìä Vendas: {dados['vendas_total']} | "
                      f"Qtd: {dados['quantidade_total']} | "
                      f"Receita: R$ {dados['receita_total']:.2f}")
                print("-" * 80)
            
            if fim >= len(produtos):
                break
            
            continuar = input("\n‚û°Ô∏è Pr√≥xima p√°gina? (s/N): ").lower()
            if continuar != 's':
                break
            
            pagina += 1
    
    def _listar_clientes(self):
        """Lista clientes cadastrados"""
        if not self.data_structure.clientes:
            print("‚ùå Nenhum cliente encontrado!")
            return
        
        print(f"\nüë• CLIENTES ({len(self.data_structure.clientes)} total)")
        print("-" * 80)
        
        # Mostrar os 20 primeiros clientes
        for i, (customer_id, dados) in enumerate(list(self.data_structure.clientes.items())[:20]):
            print(f"üë§ {customer_id} | {dados['pais']} | "
                  f"Compras: {dados['compras_total']} | "
                  f"Gasto: R$ {dados['gasto_total']:.2f}")
        
        if len(self.data_structure.clientes) > 20:
            print(f"\n... e mais {len(self.data_structure.clientes) - 20} clientes")
    
    def _listar_paises(self):
        """Lista pa√≠ses cadastrados"""
        if not self.data_structure.paises:
            print("‚ùå Nenhum pa√≠s encontrado!")
            return
        
        print(f"\nüåç PA√çSES ({len(self.data_structure.paises)} total)")
        print("-" * 50)
        
        for pais, vendas in self.data_structure.paises.items():
            total_vendas = len(vendas)
            print(f"üè≥Ô∏è {pais:<30} | üõí {total_vendas:,} vendas")
    
    def _buscar_por_produto(self):
        """Busca vendas por produto"""
        try:
            stock_code = input("Digite o c√≥digo do produto: ").strip()
            if not stock_code:
                print("‚ùå C√≥digo do produto √© obrigat√≥rio!")
                return
            
            vendas = self.crud.buscar_vendas_por_produto(stock_code)
            
            if not vendas:
                print("‚ùå Nenhuma venda encontrada para este produto!")
                return
            
            # Informa√ß√µes do produto
            if stock_code in self.data_structure.produtos:
                produto = self.data_structure.produtos[stock_code]
                print(f"\nüì¶ PRODUTO: {stock_code}")
                print(f"üìù Descri√ß√£o: {produto['description']}")
                print(f"üìä Total de Vendas: {len(vendas)}")
                print(f"üî¢ Quantidade Total: {produto['quantidade_total']}")
                print(f"üí∞ Receita Total: R$ {produto['receita_total']:.2f}")
                print("-" * 60)
            
            # Mostrar algumas vendas
            for i, venda in enumerate(vendas[:10]):  # M√°ximo 10
                print(f"{i+1}. üßæ {venda['invoice_no']} | "
                      f"Qtd: {venda['quantity']} | "
                      f"Total: R$ {venda['total']:.2f} | "
                      f"{venda['country']}")
            
            if len(vendas) > 10:
                print(f"\n... e mais {len(vendas) - 10} vendas")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def _buscar_por_pais(self):
        """Busca vendas por pa√≠s"""
        try:
            pais = input("Digite o nome do pa√≠s: ").strip()
            if not pais:
                print("‚ùå Nome do pa√≠s √© obrigat√≥rio!")
                return
            
            vendas = self.crud.buscar_vendas_por_pais(pais)
            
            if not vendas:
                print("‚ùå Nenhuma venda encontrada para este pa√≠s!")
                return
            
            print(f"\nüåç VENDAS EM {pais.upper()}")
            print(f"üìä Total de Vendas: {len(vendas)}")
            
            receita_total = sum(venda['total'] for venda in vendas)
            print(f"üí∞ Receita Total: R$ {receita_total:,.2f}")
            print("-" * 60)
            
            # Mostrar algumas vendas
            for i, venda in enumerate(vendas[:10]):  # M√°ximo 10
                print(f"{i+1}. üßæ {venda['invoice_no']} | "
                      f"{venda['stock_code']} | "
                      f"Total: R$ {venda['total']:.2f}")
            
            if len(vendas) > 10:
                print(f"\n... e mais {len(vendas) - 10} vendas")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    def executar(self):
        """
          Loop Principal de Aplica√ß√£o (Event Loop)
        
        Demonstra:
        - Loop infinito controlado
        - Tratamento de entrada do usu√°rio
        - Estrutura de menu interativo
        - Valida√ß√£o de estado (dataset carregado)
        - Tratamento de interrup√ß√µes (Ctrl+C)
        - Recupera√ß√£o graceful de erros
        """
        # ================================================================
        # MENSAGEM DE BOAS-VINDAS
        # ================================================================
        
        print("üéâ Bem-vindo ao Sistema de An√°lise de E-commerce!")
        
        # ================================================================
        # LOOP PRINCIPAL DA APLICA√á√ÉO
        # ================================================================
        
        # üîÑ WHILE TRUE - Loop Infinito Controlado:
        # - Continua at√© usu√°rio escolher sair (break)
        # - Permite navega√ß√£o cont√≠nua pelos menus
        # - Retorna ao menu principal ap√≥s cada opera√ß√£o
        
        while True:
            try:
                # ============================================================
                # APRESENTA√á√ÉO DO MENU E CAPTURA DA OP√á√ÉO
                # ============================================================
                
                self.mostrar_menu_principal()
                
                # üìù INPUT COM LIMPEZA:
                # - .strip() remove espa√ßos em branco das bordas
                # - Evita erros por espa√ßos acidentais
                opcao = input("\nDigite sua op√ß√£o: ").strip()
                
                # ============================================================
                # ROTEAMENTO DE OP√á√ïES (DISPATCHER PATTERN)
                # ============================================================
                
                if opcao == '1':
                    # üìä CARREGAR DADOS:
                    # - √önica op√ß√£o que n√£o precisa de dataset
                    # - Ponto de entrada do sistema
                    self.carregar_dataset_kaggle()
                    
                elif opcao == '2':
                    # üîç OPERA√á√ïES CRUD:
                    if self.dataset_carregado:
                        self.menu_crud()
                    else:
                        print("‚ùå √â necess√°rio carregar o dataset primeiro!")
                        
                elif opcao == '3':
                    # üìà RELAT√ìRIOS:
                    if self.dataset_carregado:
                        self.menu_relatorios()
                    else:
                        print("‚ùå √â necess√°rio carregar o dataset primeiro!")
                        
                elif opcao == '4':
                    # üíæ EXPORTA√á√ÉO:
                    if self.dataset_carregado:
                        self.menu_exportacao()
                    else:
                        print("‚ùå √â necess√°rio carregar o dataset primeiro!")
                        
                elif opcao == '5':
                    # üìã VISUALIZA√á√ÉO:
                    if self.dataset_carregado:
                        self.menu_visualizacao()
                    else:
                        print("‚ùå √â necess√°rio carregar o dataset primeiro!")
                        
                elif opcao == '0':
                    # üö™ SA√çDA CONTROLADA:
                    print("üëã Obrigado por usar o sistema!")
                    break  # Sai do loop while, encerrando o programa
                    
                else:
                    # ‚ùå VALIDA√á√ÉO DE ENTRADA:
                    print("‚ùå Op√ß√£o inv√°lida!")
                
            except KeyboardInterrupt:
                # ================================================================
                # TRATAMENTO DE INTERRUP√á√ÉO (CTRL+C)
                # ================================================================
                
                # ‚ö° KEYBOARD INTERRUPT:
                # - Usu√°rio pressionou Ctrl+C
                # - Encerra√ß√£o for√ßada mas controlada
                # - Mensagem amig√°vel em vez de erro cr√≠ptico
                
                print("\n\nüëã Sistema encerrado pelo usu√°rio!")
                break
                
            except Exception as e:
                # ================================================================
                # RECUPERA√á√ÉO GRACEFUL DE ERROS
                # ================================================================
                
                # üöë TRATAMENTO DE ERROS INESPERADOS:
                # - Mostra o erro para depura√ß√£o
                # - N√ÉO encerra o programa
                # - Volta ao menu principal
                # - Sistema continua oper√°vel
                
                print(f"‚ùå Erro inesperado: {e}")
                print("‚ÑπÔ∏è O sistema continuar√° funcionando...")


# ============================================================================
# FUN√á√ÉO PRINCIPAL E PONTO DE ENTRADA
# ============================================================================

def main():
    """
      Fun√ß√£o Principal e Tratamento de Erros Globais
    
    Demonstra:
    - Ponto de entrada estruturado
    - Tratamento de exce√ß√µes em n√≠vel de aplica√ß√£o
    - Sa√≠da controlada do programa
    - Separa√ß√£o entre l√≥gica e execu√ß√£o
    """
    try:
        # ================================================================
        # INICIALIZA√á√ÉO DO SISTEMA
        # ================================================================
        
        # üöÄ INSTANCIA√á√ÉO:
        # - Cria o sistema principal
        # - Todos os componentes s√£o inicializados automaticamente
        # - Estado inicial limpo e consistente
        sistema = EcommerceSystem()
        
        # üé® EXECU√á√ÉO DA INTERFACE:
        # - Delega controle para o sistema
        # - Loop principal de intera√ß√£o com usu√°rio
        # - Menus, valida√ß√µes, opera√ß√µes
        sistema.executar()
        
    except Exception as e:
        # ================================================================
        # TRATAMENTO DE ERROS FATAIS
        # ================================================================
        
        # üöë CAPTURA DE √öNIMA INST√ÇNCIA:
        # - Erros que n√£o foram tratados em lugar nenhum
        # - Problemas de inicializa√ß√£o do sistema
        # - Falhas cr√≠ticas de infraestrutura
        
        print(f"‚ùå Erro fatal: {e}")
        
        # üö™ SA√çDA CONTROLADA:
        # - sys.exit(1) indica erro para o sistema operacional
        # - C√≥digo 1 = erro | C√≥digo 0 = sucesso
        # - √ötil para scripts e automa√ß√£o
        sys.exit(1)


# ============================================================================
# PONTO DE ENTRADA DO PROGRAMA
# ============================================================================

if __name__ == "__main__":
    """
      Condi√ß√£o de Execu√ß√£o Principal
    
    __name__ == "__main__" significa:
    - Este arquivo est√° sendo executado diretamente (python app.py)
    - N√£o est√° sendo importado como m√≥dulo
    
    üí° UTILIDADE:
    - Permite reutilizar c√≥digo como biblioteca
    - import app n√£o executa o sistema automaticamente
    - from app import EcommerceSystem funciona sem efeitos colaterais
    
    üéØ PADR√ÉO PYTHON:
    - Conven√ß√£o universal em Python
    - Boa pr√°tica de desenvolvimento
    - Facilita testes e reutiliza√ß√£o
    """
    main()  # Chama a fun√ß√£o principal

